/*
 * Copyright 2016 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package services.validation.OTHERTestData

import uk.gov.hmrc.services.validation.Cell
import models.ValidationErrorData
import org.apache.commons.lang3.StringUtils

trait ERSValidationOTHEROptionsTestData {

  val rowNumber:Int = 1

  def getDescriptions: List[String] = {
    val descriptions =
      List(
        "validate dateOfEvent without ValidationErrors for valid data",
        "validate dateOfEvent with ValidationErrors for invalid data",
        "validate dateOfEvent with ValidationErrors for an empty field",
        "validate inRelationToASchemeWithADOTASRef without ValidationErrors for valid data",
        "validate inRelationToASchemeWithADOTASRef with ValidationErrors for invalid data",
        "validate inRelationToASchemeWithADOTASRef with ValidationErrors for an empty field",
        "validate dotasRef without ValidationErrors for valid data",
        "validate dotasRef with ValidationErrors for invalid data",
        "validate individualOptions\\firstName without ValidationErrors for valid data",
        "validate individualOptions\\firstName with ValidationErrors for a string too long",
        "validate individualOptions\\firstName with ValidationErrors for an empty field",
        "validate individualOptions\\secondName without ValidationErrors for valid data",
        "validate individualOptions\\secondName with ValidationErrors for a string too long",
        "validate individualOptions\\surname without ValidationErrors for valid data",
        "validate individualOptions\\surname with ValidationErrors for a string too long",
        "validate individualOptions\\surname with ValidationErrors for an empty field",
        "validate individualOptions\\nino without ValidationErrors for valid data",
        "validate individualOptions\\nino with ValidationErrors for invalid data",
        "validate individualOptions\\payeReference without ValidationErrors for valid data",
        "validate individualOptions\\payeReference with ValidationErrors for invalid data",
        "validate dateOfGrant without ValidationErrors for valid data",
        "validate dateOfGrant with ValidationErrors for invalid data",
        "validate dateOfGrant with ValidationErrors for an empty field",
        "validate grantorCompany without ValidationErrors for valid data",
        "validate grantorCompany with ValidationErrors for a string too long",
        "validate grantorCompany with ValidationErrors for an empty field",
        "validate grantorCompany\\companyAddress\\addressLine1 without ValidationErrors for valid data",
        "validate grantorCompany\\companyAddress\\addressLine1 with ValidationErrors for a string too long",
        "validate grantorCompany\\companyAddress\\addressLine1 with ValidationErrors for an empty field",
        "validate grantorCompany\\companyAddress\\addressLine2 without ValidationErrors for valid data",
        "validate grantorCompany\\companyAddress\\addressLine2 with ValidationErrors for a string too long",
        "validate grantorCompany\\companyAddress\\addressLine3 without ValidationErrors for valid data",
        "validate grantorCompany\\companyAddress\\addressLine3 with ValidationErrors for a string too long",
        "validate grantorCompany\\companyAddress\\addressLine4 without ValidationErrors for valid data",
        "validate grantorCompany\\companyAddress\\addressLine4 with ValidationErrors for a string too long",
        "validate grantorCompany\\companyAddress\\country without ValidationErrors for valid data",
        "validate grantorCompany\\companyAddress\\country with ValidationErrors for a string too long",
        "validate grantorCompany\\companyAddress\\postCode without ValidationErrors for valid data",
        "validate grantorCompany\\companyAddress\\postCode with ValidationErrors for a string too long",
        "validate grantorCompany\\companyCRN without ValidationErrors for valid data",
        "validate grantorCompany\\companyCRN with ValidationErrors for invalid data",
        "validate grantorCompany\\companyCRN with ValidationErrors for an empty field",
        "validate grantorCompany\\companyCTRef without ValidationErrors for valid data",
        "validate grantorCompany\\companyCTRef with ValidationErrors for invalid data",
        "validate grantorCompany\\companyPAYERef without ValidationErrors for valid data",
        "validate grantorCompany\\companyPAYERef with ValidationErrors for invalid data",
        "validate secUOPCompany\\companyName without ValidationErrors for valid data",
        "validate secUOPCompany\\companyName with ValidationErrors for a string too long",
        "validate secUOPCompany\\companyName with ValidationErrors for an empty field",
        "validate secUOPCompany\\companyAddress\\addressLine1 without ValidationErrors for valid data",
        "validate secUOPCompany\\companyAddress\\addressLine1 with ValidationErrors for a string too long",
        "validate secUOPCompany\\companyAddress\\addressLine2 without ValidationErrors for valid data",
        "validate secUOPCompany\\companyAddress\\addressLine2 with ValidationErrors for a string too long",
        "validate secUOPCompany\\companyAddress\\addressLine3 without ValidationErrors for valid data",
        "validate secUOPCompany\\companyAddress\\addressLine3 with ValidationErrors for a string too long",
        "validate secUOPCompany\\companyAddress\\addressLine4 without ValidationErrors for valid data",
        "validate secUOPCompany\\companyAddress\\addressLine4 with ValidationErrors for a string too long",
        "validate secUOPCompany\\companyAddress\\country without ValidationErrors for valid data",
        "validate secUOPCompany\\companyAddress\\country with ValidationErrors for a string too long",
        "validate secUOPCompany\\companyAddress\\postCode without ValidationErrors for valid data",
        "validate secUOPCompany\\companyAddress\\postCode with ValidationErrors for a string too long",
        "validate secUOPCompany\\companyCRN without ValidationErrors for valid data",
        "validate secUOPCompany\\companyCRN with ValidationErrors for invalid data",
        "validate secUOPCompany\\companyCTRef without ValidationErrors for valid data",
        "validate secUOPCompany\\companyCTRef with ValidationErrors for invalid data",
        "validate secUOPCompany\\companyPAYERef without ValidationErrors for valid data",
        "validate secUOPCompany\\companyPAYERef with ValidationErrors for invalid data",
        "validate optionsExercised without ValidationErrors for valid data",
        "validate optionsExercised with ValidationErrors for invalid data",
        "validate numberOfsecuritiesAcquired without ValidationErrors for valid data",
        "validate numberOfsecuritiesAcquired with ValidationErrors for a number with more than 2 decimal places",
        "validate numberOfsecuritiesAcquired with ValidationErrors for an alphanumeric string",
        "validate numberOfsecuritiesAcquired with ValidationErrors for a number larger than that allowed",
        "validate exercisePricePerSecurity without ValidationErrors for valid data",
        "validate exercisePricePerSecurity with ValidationErrors for a number with over 4 decimal places",
        "validate exercisePricePerSecurity with ValidationErrors for an alphanumeric value",
        "validate exercisePricePerSecurity with ValidationErrors for a number too large",
        "validate sharesListedOnSE without ValidationErrors for valid data",
        "validate sharesListedOnSE with ValidationErrors for invalid data",
        "validate marketValueAgreedHMRC without ValidationErrors for valid data",
        "validate marketValueAgreedHMRC with ValidationErrors for invalid data",
        "validate hmrcRef without ValidationErrors for valid data",
        "validate hmrcRef with ValidationErrors for invalid data",
        "validate amountDeductible without ValidationErrors for valid data",
        "validate amountDeductible with ValidationErrors for a number with over 4 decimal places",
        "validate amountDeductible with ValidationErrors for an alphanumeric value",
        "validate amountDeductible with ValidationErrors for a number too large",
        "validate q38 without ValidationErrors for valid data",
        "validate q38 with ValidationErrors for invalid data",
        "validate amountReceived without ValidationErrors for valid data",
        "validate amountReceived with ValidationErrors for a number with over 4 decimal places",
        "validate amountReceived with ValidationErrors for an alphanumeric value",
        "validate amountReceived with ValidationErrors for a number too large",
        "validate nicsElectionAgreementEnteredInto without ValidationErrors for valid data",
        "validate nicsElectionAgreementEnteredInto with ValidationErrors for invalid data",
        "validate payeOperatedApplied without ValidationErrors for valid data",
        "validate payeOperatedApplied with ValidationErrors for invalid data",
        "validate adjusmentMadeForUKDuties without ValidationErrors for valid data",
        "validate adjusmentMadeForUKDuties with ValidationErrors for invalid data"
      )
    descriptions
  }

  def getTestData: List[Cell] = {
    val testData = List(
      Cell("A",rowNumber,"2014-08-09"),
      Cell("A",rowNumber,"2014/08/09"),
      Cell("A",rowNumber,""),
      Cell("B",rowNumber,"yes"),
      Cell("B",rowNumber,"abc"),
      Cell("B",rowNumber,""),
      Cell("C",rowNumber,"12345678"),
      Cell("C",rowNumber,"123456"),
      Cell("D",rowNumber,"Billy"),
      Cell("D",rowNumber,StringUtils.leftPad("",45, "A")),
      Cell("D",rowNumber,""),
      Cell("E",rowNumber,"Bob"),
      Cell("E",rowNumber,StringUtils.leftPad("",45, "A")),
      Cell("F",rowNumber,"Thornton"),
      Cell("F",rowNumber,StringUtils.leftPad("",45, "A")),
      Cell("F",rowNumber,""),
      Cell("G",rowNumber,"AB123456A"),
      Cell("G",rowNumber,"abc"),
      Cell("H",rowNumber,"123/XZ55555555"),
      Cell("H",rowNumber,"abc???"),
      Cell("I",rowNumber,"2014-08-09"),
      Cell("I",rowNumber,"2014/08/09"),
      Cell("I",rowNumber,""),
      Cell("J",rowNumber,"Company Name"),
      Cell("J",rowNumber,StringUtils.leftPad("",145, "A")),
      Cell("J",rowNumber,""),
      Cell("K",rowNumber,"Company Address 1"),
      Cell("K",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("K",rowNumber,""),
      Cell("L",rowNumber,"Company Address 2"),
      Cell("L",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("M",rowNumber,"Company Address 3"),
      Cell("M",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("N",rowNumber,"Company Address 4"),
      Cell("N",rowNumber,StringUtils.leftPad("",20, "A")),
      Cell("O",rowNumber,"Company Country"),
      Cell("O",rowNumber,StringUtils.leftPad("",20, "A")),
      Cell("P",rowNumber,"SR77BS"),
      Cell("P",rowNumber,"abc"),
      Cell("Q",rowNumber,"AC097609"),
      Cell("Q",rowNumber,"ab!v"),
      Cell("Q",rowNumber,""),
      Cell("R",rowNumber,"1234567800"),
      Cell("R",rowNumber,"abv"),
      Cell("S",rowNumber,"123/XZ55555555"),
      Cell("S",rowNumber,"abv???"),
      Cell("T",rowNumber,"Company Name"),
      Cell("T",rowNumber,StringUtils.leftPad("",145, "A")),
      Cell("T",rowNumber,""),
      Cell("U",rowNumber,"Company Address 1"),
      Cell("U",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("V",rowNumber,"Company Address 2"),
      Cell("V",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("W",rowNumber,"Company Address 3"),
      Cell("W",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("X",rowNumber,"Company Address 4"),
      Cell("X",rowNumber,StringUtils.leftPad("",20, "A")),
      Cell("Y",rowNumber,"Company Country"),
      Cell("Y",rowNumber,StringUtils.leftPad("",20, "A")),
      Cell("Z",rowNumber,"SR77BS"),
      Cell("Z",rowNumber,"abc"),
      Cell("AA",rowNumber,"AC097609"),
      Cell("AA",rowNumber,"ab!v"),
      Cell("AB",rowNumber,"1234567800"),
      Cell("AB",rowNumber,"abv"),
      Cell("AC",rowNumber,"123/XZ55555555"),
      Cell("AC",rowNumber,"abv???"),
      Cell("AD",rowNumber,"no"),
      Cell("AD",rowNumber,"av"),
      Cell("AE",rowNumber,"100.00"),
      Cell("AE",rowNumber,"100.00121"),
      Cell("AE",rowNumber,"abc"),
      Cell("AE", rowNumber, StringUtils.leftPad("", 15, "1") + ".34"),
      Cell("AF", rowNumber, "10.1234"),
      Cell("AF", rowNumber, "10.1234567"),
      Cell("AF", rowNumber, "12nas"),
      Cell("AF", rowNumber, StringUtils.leftPad("", 15, "1") + ".3234"),
      Cell("AG", rowNumber, "10.1234"),
      Cell("AG", rowNumber, "10.1234567"),
      Cell("AG", rowNumber, "12nas"),
      Cell("AG", rowNumber, StringUtils.leftPad("", 15, "1") + ".3234"),
      Cell("AH",rowNumber,"no"),
      Cell("AH",rowNumber,"av"),
      Cell("AI",rowNumber,"yes"),
      Cell("AI",rowNumber,"123"),
      Cell("AJ", rowNumber, "aa12345678"),
      Cell("AJ", rowNumber, "abc12345678901"),
      Cell("AK", rowNumber, "10.1234"),
      Cell("AK", rowNumber, "10.1234567"),
      Cell("AK", rowNumber, "12nas"),
      Cell("AK", rowNumber, StringUtils.leftPad("", 15, "1") + ".3234"),
      Cell("AL",rowNumber,"yes"),
      Cell("AL",rowNumber,"123"),
      Cell("AM", rowNumber, "10.1234"),
      Cell("AM", rowNumber, "10.1234567"),
      Cell("AM", rowNumber, "12nas"),
      Cell("AM", rowNumber, StringUtils.leftPad("", 15, "1") + ".3234"),
      Cell("AN",rowNumber,"no"),
      Cell("AN",rowNumber,"av"),
      Cell("AO",rowNumber,"yes"),
      Cell("AO",rowNumber,"?!"),
      Cell("AP",rowNumber,"no"),
      Cell("AP",rowNumber,"av")
    )
    testData
  }

  def getExpectedResults: List[Option[List[ValidationErrorData]]] = {
    val expectedResults = List(
      None,
      Some(List(ValidationErrorData("error.1","001","The date must match the yyyy-mm-dd pattern."))),
      Some(List(ValidationErrorData("MANDATORY","100","'1. Date of Event yyyy-mm-dd' must have an entry."))),
      None,
      Some(List(ValidationErrorData("error.2","002","This entry must be 'yes' or 'no'."))),
      Some(List(ValidationErrorData("MANDATORY","100","'2. Is the event in relation to a disclosable tax avoidance scheme? (yes/no)' must have an entry."))),
      None,
      Some(List(ValidationErrorData("error.3","003","The scheme reference number is missing."))),
      None,
      Some(List(ValidationErrorData("error.4","004","This entry must contain 35 characters or less."))),
      Some(List(ValidationErrorData("MANDATORY","100","'4. Employee first name' must have an entry."))),
      None,
      Some(List(ValidationErrorData("error.5","005","This entry must contain 35 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.6","006","This entry must contain 35 characters or less."))),
      Some(List(ValidationErrorData("MANDATORY","100","'6. Employee last name' must have an entry."))),
      None,
      Some(List(ValidationErrorData("error.7","007","The National Insurance number must be 2 letters followed by 6 number digits, with an optional final letter."))),
      None,
      Some(List(ValidationErrorData("error.8","008","PAYE reference must be a 3 digit number followed by a forward slash and up to 10 more characters."))),
      None,
      Some(List(ValidationErrorData("error.9","009","The date must match the yyyy-mm-dd pattern."))),
      Some(List(ValidationErrorData("MANDATORY","100","'9. Date of grant of option subject to the reportable event yyyy-mm-dd' must have an entry."))),
      None,
      Some(List(ValidationErrorData("error.10","010","This entry must contain 120 characters or less."))),
      Some(List(ValidationErrorData("MANDATORY","100","'10. Grantor company name' must have an entry."))),
      None,
      Some(List(ValidationErrorData("error.11","011","This entry must contain 27 characters or less."))),
      Some(List(ValidationErrorData("MANDATORY","100","'11. Grantor company address line 1' must have an entry."))),
      None,
      Some(List(ValidationErrorData("error.12","012","This entry must contain 27 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.13","013","This entry must contain 27 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.14","014","This entry must contain 18 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.15","015","This entry must contain 18 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.16","016","Must be less than 9 characters and only have capital letters."))),
      None,
      Some(List(ValidationErrorData("error.17","017","The Company Reference Number must contain 10 characters or less."))),
      Some(List(ValidationErrorData("MANDATORY","100","'17. Grantor Company Registration Number (CRN), if applicable' must have an entry."))),
      None,
      Some(List(ValidationErrorData("error.18","018","The Corporation Tax reference must be a 10 digit number."))),
      None,
      Some(List(ValidationErrorData("error.19","019","PAYE reference must be a 3 digit number followed by a forward slash and up to 10 more characters."))),
      None,
      Some(List(ValidationErrorData("error.20","020","This entry must contain 120 characters or less."))),
      Some(List(ValidationErrorData("MANDATORY","100","'20. Name of the company whose securities under option' must have an entry."))),
      None,
      Some(List(ValidationErrorData("error.21","021","This entry must contain 27 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.22","022","This entry must contain 27 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.23","023","This entry must contain 27 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.24","024","This entry must contain 18 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.25","025","This entry must contain 18 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.26","026","Must be less than 9 characters and only have capital letters."))),
      None,
      Some(List(ValidationErrorData("error.27","027","The Company Reference Number must contain 10 characters or less."))),
      None,
      Some(List(ValidationErrorData("error.28","028","The Corporation Tax reference must be a 10 digit number."))),
      None,
      Some(List(ValidationErrorData("error.29","029","PAYE reference must be a 3 digit number followed by a forward slash and up to 10 more characters."))),
      None,
      Some(List(ValidationErrorData("error.30","030","This entry must be 'yes' or 'no'."))),
      None,
      Some(List(ValidationErrorData("error.31","031","This entry must be a number with 2 digits after the decimal point."))),
      Some(List(
        ValidationErrorData("error.31","031","This entry must be a number with 2 digits after the decimal point."),
        ValidationErrorData("error.32","032","This entry must be a number made up of digits."),
        ValidationErrorData("error.33","033","This entry is larger than the maximum number value allowed.")
      )),
      Some(List(ValidationErrorData("error.33","033","This entry is larger than the maximum number value allowed."))),
      None,
      Some(List(ValidationErrorData("error.34","034","This entry must be a number with 4 digits after the decimal point."))),
      Some(List(
        ValidationErrorData("error.34","034","This entry must be a number with 4 digits after the decimal point."),
        ValidationErrorData("error.35","035","This entry must be a number made up of digits."),
        ValidationErrorData("error.36","036","This entry is larger than the maximum number value allowed.")
      )),
      Some(List(ValidationErrorData("error.36","036","This entry is larger than the maximum number value allowed."))),
      None,
      Some(List(ValidationErrorData("error.37","037","This entry must be a number with 4 digits after the decimal point."))),
      Some(List(
        ValidationErrorData("error.37","037","This entry must be a number with 4 digits after the decimal point."),
        ValidationErrorData("error.38","038","This entry must be a number made up of digits."),
        ValidationErrorData("error.39","039","This entry is larger than the maximum number value allowed.")
      )),
      Some(List(ValidationErrorData("error.39","039","This entry is larger than the maximum number value allowed."))),
      None,
      Some(List(ValidationErrorData("error.40","040","This entry must be 'yes' or 'no'."))),
      None,
      Some(List(ValidationErrorData("error.41","041","This entry must be 'yes' or 'no'."))),
      None,
      Some(List(ValidationErrorData("error.42","042","The HMRC reference must contain 10 characters or less (letters, numbers or both)."))),
      None,
      Some(List(ValidationErrorData("error.43","043","This entry must be a number with 4 digits after the decimal point."))),
      Some(List(
        ValidationErrorData("error.43","043","This entry must be a number with 4 digits after the decimal point."),
        ValidationErrorData("error.44","044","This entry must be a number made up of digits."),
        ValidationErrorData("error.45","045","This entry is larger than the maximum number value allowed.")
      )),
      Some(List(ValidationErrorData("error.45","045","This entry is larger than the maximum number value allowed."))),
      None,
      Some(List(ValidationErrorData("error.46","046","This entry must be 'yes' or 'no'."))),
      None,
      Some(List(ValidationErrorData("error.47","047","This entry must be a number with 4 digits after the decimal point."))),
      Some(List(
        ValidationErrorData("error.47","047","This entry must be a number with 4 digits after the decimal point."),
        ValidationErrorData("error.48","048","This entry must be a number made up of digits."),
        ValidationErrorData("error.49","049","This entry is larger than the maximum number value allowed.")
      )),
      Some(List(ValidationErrorData("error.49","049","This entry is larger than the maximum number value allowed."))),
      None,
      Some(List(ValidationErrorData("error.50","050","This entry must be 'yes' or 'no'."))),
      None,
      Some(List(ValidationErrorData("error.51","051","This entry must be 'yes' or 'no'."))),
      None,
      Some(List(ValidationErrorData("error.52","052","This entry must be 'yes' or 'no'.")))
    )
    expectedResults
  }

  def getValidRowData:Seq[Cell] = {
    val rowData = Seq(
      Cell("A",rowNumber,"2014-08-09"),
      Cell("B",rowNumber,"yes"),
      Cell("C",rowNumber,"12345678"),
      Cell("D",rowNumber,"Billy"),
      Cell("E",rowNumber,"Bob"),
      Cell("F",rowNumber,"Thornton"),
      Cell("G",rowNumber,"AB123456A"),
      Cell("H",rowNumber,"123/XZ55555555"),
      Cell("I",rowNumber,"2014-08-09"),
      Cell("J",rowNumber,"Company Name"),
      Cell("K",rowNumber,"Company Address 1"),
      Cell("L",rowNumber,"Company Address 2"),
      Cell("M",rowNumber,"Company Address 3"),
      Cell("N",rowNumber,"Company Address 4"),
      Cell("O",rowNumber,"Company Country"),
      Cell("P",rowNumber,"SR77BS"),
      Cell("Q",rowNumber,"AC097609"),
      Cell("R",rowNumber,"1234567800"),
      Cell("S",rowNumber,"123/XZ55555555"),
      Cell("T",rowNumber,"Company Name"),
      Cell("U",rowNumber,"Company Address 1"),
      Cell("V",rowNumber,"Company Address 2"),
      Cell("W",rowNumber,"Company Address 3"),
      Cell("X",rowNumber,"Company Address 4"),
      Cell("Y",rowNumber,"Company Country"),
      Cell("Z",rowNumber,"SR77BS"),
      Cell("AA",rowNumber,"AC097609"),
      Cell("AB",rowNumber,"1234567800"),
      Cell("AC",rowNumber,"123/XZ55555555"),
      Cell("AD",rowNumber,"no"),
      Cell("AE",rowNumber,"100.00"),
      Cell("AF", rowNumber,"10.1234"),
      Cell("AG",rowNumber,"10.1234"),
      Cell("AH",rowNumber,"no"),
      Cell("AI",rowNumber,"yes"),
      Cell("AJ", rowNumber,"aa12345678"),
      Cell("AK", rowNumber,"10.1234"),
      Cell("AL",rowNumber,"yes"),
      Cell("AM", rowNumber,"10.1234"),
      Cell("AN",rowNumber,"no"),
      Cell("AO",rowNumber,"yes"),
      Cell("AP",rowNumber,"no")
    )
    rowData
  }

  def getInvalidRowData:Seq[Cell] = {
    val rowData = Seq(
      Cell("A",rowNumber,"2014/08/09"),
      Cell("B",rowNumber,"abc"),
      Cell("C",rowNumber,"123456"),
      Cell("D",rowNumber,StringUtils.leftPad("",45, "A")),
      Cell("E",rowNumber,StringUtils.leftPad("",45, "A")),
      Cell("F",rowNumber,StringUtils.leftPad("",45, "A")),
      Cell("G",rowNumber,"abc"),
      Cell("H",rowNumber,"abc???"),
      Cell("I",rowNumber,"2014/08/09"),
      Cell("J",rowNumber,StringUtils.leftPad("",145, "A")),
      Cell("K",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("L",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("M",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("N",rowNumber,StringUtils.leftPad("",20, "A")),
      Cell("O",rowNumber,StringUtils.leftPad("",20, "A")),
      Cell("P",rowNumber,"abc"),
      Cell("Q",rowNumber,"a!bv"),
      Cell("R",rowNumber,"abv"),
      Cell("S",rowNumber,"abv???"),
      Cell("T",rowNumber,StringUtils.leftPad("",145, "A")),
      Cell("U",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("V",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("W",rowNumber,StringUtils.leftPad("",30, "A")),
      Cell("X",rowNumber,StringUtils.leftPad("",20, "A")),
      Cell("Y",rowNumber,StringUtils.leftPad("",20, "A")),
      Cell("Z",rowNumber,"abc"),
      Cell("AA",rowNumber,"a!bv"),
      Cell("AB",rowNumber,"abv"),
      Cell("AC",rowNumber,"abv???"),
      Cell("AD",rowNumber,"av"),
      Cell("AE", rowNumber, StringUtils.leftPad("", 15, "1") + ".34"),
      Cell("AF", rowNumber, StringUtils.leftPad("", 15, "1") + ".3234"),
      Cell("AG", rowNumber, StringUtils.leftPad("", 15, "1") + ".3234"),
      Cell("AH",rowNumber,"av"),
      Cell("AI",rowNumber,"123"),
      Cell("AJ", rowNumber, "abc12345678901"),
      Cell("AK", rowNumber, StringUtils.leftPad("", 15, "1") + ".3234"),
      Cell("AL",rowNumber,"123"),
      Cell("AM", rowNumber, StringUtils.leftPad("", 15, "1") + ".3234"),
      Cell("AN",rowNumber,"av"),
      Cell("AO",rowNumber,"?!"),
      Cell("AP",rowNumber,"av")
    )
    rowData
  }

}
